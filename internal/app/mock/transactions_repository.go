// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/transactions_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/transactions_repository.go -destination=internal/app/mock/transactions_repository.go -package=mock OrderTransactionsRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"

	model "github.com/patraden/ya-practicum-go-mart/internal/app/domain/model"
)

// MockOrderTransactionsRepository is a mock of OrderTransactionsRepository interface.
type MockOrderTransactionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderTransactionsRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderTransactionsRepositoryMockRecorder is the mock recorder for MockOrderTransactionsRepository.
type MockOrderTransactionsRepositoryMockRecorder struct {
	mock *MockOrderTransactionsRepository
}

// NewMockOrderTransactionsRepository creates a new mock instance.
func NewMockOrderTransactionsRepository(ctrl *gomock.Controller) *MockOrderTransactionsRepository {
	mock := &MockOrderTransactionsRepository{ctrl: ctrl}
	mock.recorder = &MockOrderTransactionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderTransactionsRepository) EXPECT() *MockOrderTransactionsRepositoryMockRecorder {
	return m.recorder
}

// CreateWithdrawal mocks base method.
func (m *MockOrderTransactionsRepository) CreateWithdrawal(ctx context.Context, trx *model.OrderTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, trx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockOrderTransactionsRepositoryMockRecorder) CreateWithdrawal(ctx, trx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockOrderTransactionsRepository)(nil).CreateWithdrawal), ctx, trx)
}

// GetUserBalance mocks base method.
func (m *MockOrderTransactionsRepository) GetUserBalance(ctx context.Context, userID uuid.UUID) (*model.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*model.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockOrderTransactionsRepositoryMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockOrderTransactionsRepository)(nil).GetUserBalance), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockOrderTransactionsRepository) GetUserWithdrawals(ctx context.Context, userID uuid.UUID) ([]model.OrderTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]model.OrderTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockOrderTransactionsRepositoryMockRecorder) GetUserWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockOrderTransactionsRepository)(nil).GetUserWithdrawals), ctx, userID)
}
