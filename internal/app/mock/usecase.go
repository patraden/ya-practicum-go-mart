// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecase/usecase.go -destination=internal/app/mock/usecase.go -package=mock IUserUseCase,ITransactionsUseCase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"

	model "github.com/patraden/ya-practicum-go-mart/internal/app/domain/model"
	dto "github.com/patraden/ya-practicum-go-mart/internal/app/dto"
)

// MockIUserUseCase is a mock of IUserUseCase interface.
type MockIUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUseCaseMockRecorder
	isgomock struct{}
}

// MockIUserUseCaseMockRecorder is the mock recorder for MockIUserUseCase.
type MockIUserUseCaseMockRecorder struct {
	mock *MockIUserUseCase
}

// NewMockIUserUseCase creates a new mock instance.
func NewMockIUserUseCase(ctrl *gomock.Controller) *MockIUserUseCase {
	mock := &MockIUserUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUseCase) EXPECT() *MockIUserUseCaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserUseCase) CreateUser(ctx context.Context, creds *dto.UserCredentials) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, creds)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserUseCaseMockRecorder) CreateUser(ctx, creds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserUseCase)(nil).CreateUser), ctx, creds)
}

// ValidateUser mocks base method.
func (m *MockIUserUseCase) ValidateUser(ctx context.Context, creds *dto.UserCredentials) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, creds)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockIUserUseCaseMockRecorder) ValidateUser(ctx, creds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockIUserUseCase)(nil).ValidateUser), ctx, creds)
}

// MockITransactionsUseCase is a mock of ITransactionsUseCase interface.
type MockITransactionsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionsUseCaseMockRecorder
	isgomock struct{}
}

// MockITransactionsUseCaseMockRecorder is the mock recorder for MockITransactionsUseCase.
type MockITransactionsUseCaseMockRecorder struct {
	mock *MockITransactionsUseCase
}

// NewMockITransactionsUseCase creates a new mock instance.
func NewMockITransactionsUseCase(ctrl *gomock.Controller) *MockITransactionsUseCase {
	mock := &MockITransactionsUseCase{ctrl: ctrl}
	mock.recorder = &MockITransactionsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionsUseCase) EXPECT() *MockITransactionsUseCaseMockRecorder {
	return m.recorder
}

// CreateWithdrawal mocks base method.
func (m *MockITransactionsUseCase) CreateWithdrawal(ctx context.Context, wd *dto.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, wd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockITransactionsUseCaseMockRecorder) CreateWithdrawal(ctx, wd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockITransactionsUseCase)(nil).CreateWithdrawal), ctx, wd)
}

// GetUserBalance mocks base method.
func (m *MockITransactionsUseCase) GetUserBalance(ctx context.Context, userID uuid.UUID) (*model.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*model.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockITransactionsUseCaseMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockITransactionsUseCase)(nil).GetUserBalance), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockITransactionsUseCase) GetUserWithdrawals(ctx context.Context, userID uuid.UUID) ([]model.OrderTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]model.OrderTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockITransactionsUseCaseMockRecorder) GetUserWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockITransactionsUseCase)(nil).GetUserWithdrawals), ctx, userID)
}

// MockIOrderUseCase is a mock of IOrderUseCase interface.
type MockIOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderUseCaseMockRecorder
	isgomock struct{}
}

// MockIOrderUseCaseMockRecorder is the mock recorder for MockIOrderUseCase.
type MockIOrderUseCaseMockRecorder struct {
	mock *MockIOrderUseCase
}

// NewMockIOrderUseCase creates a new mock instance.
func NewMockIOrderUseCase(ctrl *gomock.Controller) *MockIOrderUseCase {
	mock := &MockIOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockIOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderUseCase) EXPECT() *MockIOrderUseCaseMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderUseCase) CreateOrder(ctx context.Context, userID uuid.UUID, orderID string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderUseCaseMockRecorder) CreateOrder(ctx, userID, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderUseCase)(nil).CreateOrder), ctx, userID, orderID)
}

// GetOrders mocks base method.
func (m *MockIOrderUseCase) GetOrders(ctx context.Context, userID uuid.UUID) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIOrderUseCaseMockRecorder) GetOrders(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIOrderUseCase)(nil).GetOrders), ctx, userID)
}
