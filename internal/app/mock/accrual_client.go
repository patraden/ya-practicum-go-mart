// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/integration/accrual/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/integration/accrual/client.go -destination=internal/app/mock/accrual_client.go -package=mock IClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"

	model "github.com/patraden/ya-practicum-go-mart/internal/app/domain/model"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
	isgomock struct{}
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// GetOrderStatus mocks base method.
func (m *MockIClient) GetOrderStatus(ctx context.Context, orderID int64, userID uuid.UUID) (*model.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", ctx, orderID, userID)
	ret0, _ := ret[0].(*model.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockIClientMockRecorder) GetOrderStatus(ctx, orderID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockIClient)(nil).GetOrderStatus), ctx, orderID, userID)
}

// IsAlive mocks base method.
func (m *MockIClient) IsAlive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlive indicates an expected call of IsAlive.
func (mr *MockIClientMockRecorder) IsAlive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockIClient)(nil).IsAlive))
}
