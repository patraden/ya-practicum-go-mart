// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (id, username, password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (username) DO UPDATE
SET id = users.id,
    username = users.username,
    password = users.password,
    created_at = users.created_at,
    updated_at = users.updated_at
RETURNING id, username, password, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID `db:"id"`
	Username  string    `db:"username"`
	Password  []byte    `db:"password"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUser = `-- name: GetUser :one
SELECT id, username, password, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, GetUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
